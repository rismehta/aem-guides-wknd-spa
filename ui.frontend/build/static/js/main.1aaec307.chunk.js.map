{"version":3,"sources":["App.js","LocalDevModelClient.js","components/Page/Page.js","components/RouteHelper/RouteHelper.js","components/Text/Text.js","utils/extract-model-id.js","components/AdaptiveForm/AdaptiveForm.js","components/AdaptiveForm/components/TextField.js","components/AdaptiveForm/components/Panel.js","components/AdaptiveForm/components/Button.js","components/AdaptiveForm/components/DropDown.js","index.js"],"names":["App","props","LocalDevModelClient","ModelClient","fetch","modelPath","err","Promise","reject","Error","apihostPrefix","this","_apiHost","credentials","headers","process","then","response","status","json","catch","error","require","MapTo","WrappedComponent","className","Component","render","routePath","cqPath","extension","exact","path","routeProps","TextEditConfig","emptyLabel","isEmpty","text","trim","length","Text","richText","id","replace","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","richTextContent","config","FormContainerEditConfig","cqItems","model","form","createFormInstance","getState","formPath","properties","subscribe","action","body","payload","redirectUrl","window","location","href","thankYouMessage","formContainerElement","document","querySelector","createElement","setAttribute","innerHTML","replaceWith","alert","Provider","value","modelId","getUniqueId","label","InputWrapper","size","showPassword","autoComplete","errorBorderColor","type","InputGroupWrapper","inputTypePassword","handlerShowHidePassword","width","h","onClick","TextFieldComponent","format","required","readOnly","maxLength","placeholder","description","errorMessage","inputType","show","setShow","React","useState","keyChangeFn","event","thisVal","target","textValLen","keyCode","zipCheck","newVal","onChange","checkIsValidField","undefined","component","onBlur","isReadOnly","isRequired","onKeyDown","isInvalid","visible","mb","htmlFor","color","AFTextFieldComp","isInEditor","convertedProps","state","handlers","useRuleEngine","dispatchChange","newProps","AuthoringUtils","layout","PanelEditConfig","columnGap","colorScheme","ButtonComponent","enabled","height","marginTnB","border","disabled","mt","AFButtonComp","dispatchClick","DropDownComponent","dropdownData","enumNames","enum","parseInt","map","optionText","index","AFDropDownComp","selectedKey","modelManagerOptions","addEventListener","ModelManager","initialize","pageModel","history","createBrowserHistory","cqChildren","Constants","CHILDREN_PROP","ITEMS_PROP","cqItemsOrder","ITEMS_ORDER_PROP","PATH_PROP","locationPathname","pathname","getElementById"],"mappings":"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","file":"static/js/main.1aaec307.chunk.js","sourcesContent":["import { Page } from '@adobe/aem-react-editable-components';\nimport React from 'react';\n\n/**\n * This component is the application entry point.\n *\n * Optionally the index.js's use of <App ../> can be replaced with <Page ../>\n *\n * We'll keep this broken out in case we need to do more complex App-level configurations\n * like setting context, etc.\n */\nconst App = (props) => (\n    <Page {...props}/>\n)\n\nexport default App;","import {ModelClient} from '@adobe/aem-spa-page-model-manager';\n\n/**\n * Used to make react-server possible (localhost development).\n */\nexport default class LocalDevModelClient extends ModelClient{\n\n    fetch(modelPath) {\n\n        if (!modelPath) {\n            const err = `Fetching model rejected for path: ${modelPath}`;\n\n            return Promise.reject(new Error(err));\n        }\n\n        // Either the API host has been provided or we make an absolute request relative to the current host\n        const apihostPrefix = this._apiHost || '';\n        const url = `${apihostPrefix}${modelPath}`;\n\n        return fetch(url, {\n            credentials: 'same-origin',\n            headers: {\n                'Authorization': process.env.REACT_APP_AEM_AUTHORIZATION_HEADER\n            }\n        }).then((response) => {\n            if ((response.status >= 200) && (response.status < 300)) {\n                return response.json() ;\n            }\n\n            return Promise.reject(response);\n        }).catch((error) => {\n            return Promise.reject(error);\n        });\n\n    }\n\n}","/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ~ Copyright 2020 Adobe Systems Incorporated\n ~\n ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n ~ you may not use this file except in compliance with the License.\n ~ You may obtain a copy of the License at\n ~\n ~     http://www.apache.org/licenses/LICENSE-2.0\n ~\n ~ Unless required by applicable law or agreed to in writing, software\n ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n ~ See the License for the specific language governing permissions and\n ~ limitations under the License.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n\nimport {\n  MapTo,\n  Page\n} from '@adobe/aem-react-editable-components';\nimport { withRoute } from '../RouteHelper/RouteHelper';\nimport React from 'react';\n\nrequire('./Page.css');\n\n// This component is a variant of a Page component mapped to the\n// \"wknd-spa-react/components/page\" resource type. For now, the rendering is\n// the same as the RootPage; this is more for illustration purposes\nconst AppPage = (props) => {\n  return <Page {...props} className={props.className || ` page` }/>\n}\n\nexport default MapTo('wknd-spa-react-latest/components/page')(\n    withRoute(AppPage)\n);\n","/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ~ Copyright 2020 Adobe Systems Incorporated\n ~\n ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n ~ you may not use this file except in compliance with the License.\n ~ You may obtain a copy of the License at\n ~\n ~     http://www.apache.org/licenses/LICENSE-2.0\n ~\n ~ Unless required by applicable law or agreed to in writing, software\n ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n ~ See the License for the specific language governing permissions and\n ~ limitations under the License.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\n\n/**\n * Helper that facilitate the use of the {@link Route} component\n */\n\n/**\n * Returns a composite component where a {@link Route} component wraps the provided component\n *\n * @param {React.Component} WrappedComponent    - React component to be wrapped\n * @param {string} [extension=html]             - extension used to identify a route amongst the tree of resource URLs\n * @returns {CompositeRoute}\n */\nexport const withRoute = (WrappedComponent, extension) => {\n  return class CompositeRoute extends Component {\n    render() {\n      let routePath = this.props.cqPath;\n      if (!routePath) {\n        return <WrappedComponent {...this.props} />;\n      }\n\n      extension = extension || 'html';\n\n      // Context path + route path + extension\n      return (\n        <Route\n          key={routePath}\n          exact\n          path={'(.*)' + routePath + '(.' + extension + ')?'}\n          render={routeProps => {\n            return <WrappedComponent {...this.props} {...routeProps} />;\n          }}\n        />\n      );\n    }\n  };\n};\n","/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ~ Copyright 2020 Adobe Systems Incorporated\n ~\n ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n ~ you may not use this file except in compliance with the License.\n ~ You may obtain a copy of the License at\n ~\n ~     http://www.apache.org/licenses/LICENSE-2.0\n ~\n ~ Unless required by applicable law or agreed to in writing, software\n ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n ~ See the License for the specific language governing permissions and\n ~ limitations under the License.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n\nimport { EditableComponent, MapTo } from \"@adobe/aem-react-editable-components\";\nimport DOMPurify from \"dompurify\";\nimport React from \"react\";\nimport extractModelId from \"../../utils/extract-model-id\";\n\nrequire(\"./Text.css\");\n\n/**\n * Default Edit configuration for the Text component that interact with the Core Text component and sub-types\n *\n * @type EditConfig\n */\nconst TextEditConfig = {\n  emptyLabel: \"Text\",\n\n  isEmpty: function (props) {\n    return !props || !props.text || props.text.trim().length < 1;\n  },\n};\n\nconst Text = (props) => {\n  const richTextContent = () => {\n    return (\n        <div\n            id={extractModelId(props.cqPath)}\n            data-rte-editelement\n            dangerouslySetInnerHTML={{\n              __html: DOMPurify.sanitize(props.text),\n            }}\n        />\n    );\n  };\n\n  const textContent = () => {\n    return <div>{props.text}</div>;\n  };\n\n  return props.richText ? richTextContent() : textContent();\n};\n\nconst EditableText = (props) => {\n  return (\n      <EditableComponent config={TextEditConfig} {...props}>\n        <Text {...props} />\n      </EditableComponent>\n  );\n};\n\nexport default MapTo(\"wknd-spa-react-latest/components/text\")(EditableText);","/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ~ Copyright 2020 Adobe Systems Incorporated\n ~\n ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n ~ you may not use this file except in compliance with the License.\n ~ You may obtain a copy of the License at\n ~\n ~     http://www.apache.org/licenses/LICENSE-2.0\n ~\n ~ Unless required by applicable law or agreed to in writing, software\n ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n ~ See the License for the specific language governing permissions and\n ~ limitations under the License.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n\n/**\n * Extract an id from the cqModel field of given properties\n *\n * @param path - Path to be converted into an id\n * @returns {string|undefined}\n */\nexport default function extractModelId(path) {\n  return path && path.replace(/\\/|:/g, '_');\n}\n","\nimport {\n    MapTo,\n    ResponsiveGrid\n} from '@adobe/aem-react-editable-components';\nimport React from 'react';\nimport {EditableComponent} from \"@adobe/aem-react-editable-components\";\nimport {createFormInstance} from \"@aemforms/af-core\";\nimport {FormContext} from \"@aemforms/af-react-renderer\";\n\nconst EditableAdaptiveForm = (props) => {\n    const FormContainerEditConfig = {\n        emptyLabel:  'Adaptive Form Container',\n        isEmpty: function (props) {\n            return props.cqItems == null || props.cqItems.length === 0;\n        }\n    };\n    const {model} = props;\n    // create runtime form state from json\n    const form = createFormInstance(model);\n    props.model = form.getState();\n    const formPath = props?.model?.properties?.[\"fd:path\"];\n    // submit success handler\n    form.subscribe((action) => {\n        let body = action.payload?.body;\n        if (body) {\n            if (body.redirectUrl) {\n                window.location.href = body.redirectUrl;\n            } else if (body.thankYouMessage) {\n                let formContainerElement = document.querySelector(\"[data-cmp-path='\"+ formPath +\"']\");\n                let thankYouMessage = document.createElement(\"div\");\n                thankYouMessage.setAttribute(\"class\", \"tyMessage\");\n                thankYouMessage.innerHTML = body.thankYouMessage;\n                formContainerElement.replaceWith(thankYouMessage);\n            } else {\n                // if anything else, then it should be an error\n                window.alert(\"Error during form submission\"); // todo localize this\n            }\n        }\n    }, \"submitSuccess\");\n    // submit error handler\n    form.subscribe((action) => {\n        let defaultSubmissionError = \"Error during form submission\"; // todo localize this\n        window.alert(defaultSubmissionError);\n    }, \"submitError\");\n    // data-cmp-path and data-cmp-is required for some editor functionality to work\n    // check github documentation\n    // EditableComponent is required to make the component editable (ie) refresh in case of dialog changes\n    return (\n        <EditableComponent config={FormContainerEditConfig} {...props}>\n            <FormContext.Provider value={{form: form, modelId: form.getUniqueId()}}>\n                <form\n                    data-cmp-path={formPath}\n                    data-cmp-is=\"adaptiveFormContainer\">\n                    {props?.model?.label?.value ?<h2>{props.model.label.value}</h2> : null}\n                    <ResponsiveGrid\n                        config={FormContainerEditConfig} {...props}>\n                    </ResponsiveGrid>\n                </form>\n            </FormContext.Provider>\n        </EditableComponent>);\n};\n\n\nexport default MapTo(\"wknd-spa-react-latest/components/adaptiveForm/formcontainer\")(EditableAdaptiveForm);\n","import React from 'react';\nimport {  Input, FormControl, FormLabel, Text, Tooltip, InputGroup, InputRightElement, Button } from '@chakra-ui/react';\nimport {useRuleEngine} from '@aemforms/af-react-renderer';\nimport {EditableComponent, MapTo} from \"@adobe/aem-react-editable-components\";\nimport { AuthoringUtils} from \"@adobe/aem-spa-page-model-manager\";\n\nconst InputWrapper = (props) => {\n    const {\n        id,\n        size = \"lg\",\n        showPassword = true,\n        autoComplete = \"off\",\n        errorBorderColor = \"crimson\",\n    } = props;\n    return (\n        <Input\n            id={id}\n            size={size}\n            autoComplete={autoComplete}\n            errorBorderColor={errorBorderColor}\n            type={showPassword ? \"text\" : \"password\"}\n            {...props}\n        />\n    );\n};\n\nconst InputGroupWrapper = (props) => {\n    const {\n        showPassword = false,\n        inputTypePassword = false,\n        handlerShowHidePassword = () => {},\n    } = props;\n    return inputTypePassword ? (\n        <InputGroup>\n            <InputWrapper {...props} />\n            <InputRightElement width=\"4.5rem\">\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handlerShowHidePassword}>\n                    {showPassword ? \"Hide\" : \"Show\"}\n                </Button>\n            </InputRightElement>\n        </InputGroup>\n    ) : (\n        <InputWrapper {...props} />\n    );\n};\n\nconst TextFieldComponent = (props) => {\n    const {\n        id,\n        error,\n        label,\n        value,\n        format,\n        required,\n        readOnly,\n        maxLength,\n        properties,\n        placeholder,\n        description,\n        errorMessage,\n    } = props;\n\n    const { inputType } = properties || {};\n    const [show, setShow] = React.useState(false);\n    const handleClick = () => setShow(!show);\n\n    const keyChangeFn = (event) => {\n        let thisVal = event.target.value;\n        const textValLen = thisVal?.length;\n        if (format === \"date\") {\n            if (event?.keyCode && event.keyCode !== 8) {\n                if (textValLen === 4 || textValLen === 7) {\n                    thisVal += \"-\";\n                    event.target.value = thisVal;\n                }\n            }\n        } else if (properties?.format === \"ssn\" || properties?.format === \"zip\") {\n            if (event?.keyCode && event.keyCode !== 8) {\n                const zipCheck = properties.format === \"zip\" && textValLen === 5;\n                const ssnCheck =\n                    properties.format === \"ssn\" && (textValLen === 3 || textValLen === 7);\n                if (ssnCheck || zipCheck) {\n                    thisVal += \"-\";\n                }\n                event.target.value = thisVal;\n            }\n            const newVal = thisVal.replace(/-/g, \"\");\n            props.onChange(newVal);\n            return true;\n        }\n        props.onChange(thisVal);\n    };\n\n    const handleChange = (event) => {\n        let thisVal = event.target.value;\n        if (maxLength && thisVal.length === maxLength + 1) {\n            return;\n        }\n        keyChangeFn(event);\n    };\n\n    const handleKeyDown = (event) => {\n        keyChangeFn(event);\n    };\n\n    const handleBlur = (event) => {\n        props.onBlur(event.target.value);\n    };\n\n    const checkIsValidField =\n        errorMessage !== undefined ? errorMessage.length > 0 : false;\n\n    const component = (\n        <InputGroupWrapper\n            value={value}\n            onBlur={handleBlur}\n            isReadOnly={readOnly}\n            isRequired={required}\n            onChange={handleChange}\n            placeholder={placeholder}\n            onKeyDown={handleKeyDown}\n            isInvalid={checkIsValidField}\n            handlerShowHidePassword={handleClick}\n            inputTypePassword={inputType === \"password\"}\n            showPassword={inputType === \"password\" ? !!show : true}\n        />\n    );\n    const isVisible = typeof props.visible === 'undefined' || props.visible;\n    return isVisible ? (\n        <FormControl isInvalid={error} mb={30}>\n            <FormLabel htmlFor={id}>\n                {label.value} {label.value && required ? \"*\" : \"\"}\n            </FormLabel>\n            {description?.length ? (\n                <Tooltip label={description}>{component}</Tooltip>\n            ) : (\n                component\n            )}\n            <Text mb=\"8px\" color={\"crimson\"}>\n                {errorMessage}\n            </Text>\n        </FormControl>\n    ) : null;\n};\n\n\n// adaptive form specific text field\nconst AFTextFieldComp = props => {\n    const {isInEditor} = props;\n    let convertedProps = {...props}; // we add some default values in the model which is required here\n    if (!isInEditor) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [state, handlers] = useRuleEngine(props);\n        // don't add form change or blur listeners in authoring, so that AEM listeners work\n        convertedProps = {\n            onChange: handlers.dispatchChange,\n            onBlur: handlers.dispatchChange,\n            ...state\n        };\n    }\n    return (\n        <TextFieldComponent {...convertedProps} />\n    );\n}\n\n// editable text field\nconst EditableTextField = (props) => {\n    const TextFieldEditConfig = {\n        emptyLabel: 'Text Field',\n        isEmpty: function (props) {\n            return !props;\n        }\n    };\n    let isInEditor = AuthoringUtils.isInEditor();\n    const newProps = {\n        isInEditor,\n        ...props\n    };\n    return (\n        <EditableComponent config={TextFieldEditConfig} {...newProps}>\n            <AFTextFieldComp {...newProps} />\n        </EditableComponent>\n    );\n};\n\nexport default MapTo('wknd-spa-react-latest/components/adaptiveForm/textinput')(EditableTextField);\n","import { SimpleGrid } from '@chakra-ui/react'\nimport React from 'react';\nimport {EditableComponent, MapTo, ResponsiveGrid} from \"@adobe/aem-react-editable-components\";\nimport {useRuleEngine} from '@aemforms/af-react-renderer';\nimport { AuthoringUtils} from \"@adobe/aem-spa-page-model-manager\";\n\nconst EditablePanel = (props) => {\n    let {model} = props; // get the adaptive form json from props\n    let isInEditor = AuthoringUtils.isInEditor();\n    if (!isInEditor) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [state, handlers] = useRuleEngine(model);\n        const {\n            layout\n        } = state?.properties || {};\n        // update the model with the state at runtime\n        model = {\n            ...state\n        }\n    }\n    const PanelEditConfig = {\n        emptyLabel:  'Adaptive Form Panel',\n        isEmpty: function (props) {\n            return props.cqItems == null || props.cqItems.length === 0;\n        }\n    };\n    if (typeof model.visible === 'undefined' || model.visible) {\n        return (<EditableComponent config={PanelEditConfig} {...props}>\n            <SimpleGrid\n                columnGap={10}\n                colorScheme=\"blue\">\n                <ResponsiveGrid\n                    config={PanelEditConfig} {...props}>\n                </ResponsiveGrid>\n            </SimpleGrid>\n        </EditableComponent>);\n    } else {\n        return null;\n    }\n};\n\nexport default MapTo(\"wknd-spa-react-latest/components/adaptiveForm/panelcontainer\")(EditablePanel);\n","import { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport {useRuleEngine} from \"@aemforms/af-react-renderer\";\nimport {AuthoringUtils} from \"@adobe/aem-spa-page-model-manager\";\nimport {EditableComponent, MapTo} from \"@adobe/aem-react-editable-components\";\n\n// chakra button\nconst ButtonComponent = ({\n                             label,\n                             onClick,\n                             enabled,\n                             className,\n                             properties,\n                             visible\n                         }) => {\n\n    const handleClick = (event) => {\n        onClick(event);\n    };\n    const isVisible = typeof visible === 'undefined' || visible;\n    return isVisible ? (\n        <Button\n            size=\"md\"\n            height=\"48px\"\n            width={properties?.marginTnB === false ? \"25%\" : \"100%\"}\n            border=\"2px\"\n            colorScheme=\"blue\"\n            onClick={handleClick}\n            className={className}\n            disabled={!enabled}\n            mt={properties?.marginTnB === false ? \"0\" : \"30\"}\n            mb={properties?.marginTnB === false ? \"0\" : \"30\"}\n        >\n            {label.value}\n        </Button>\n    ) : null;\n};\n\n// adaptive form button wrapper\n// abstract business logic to interact with adaptive form rules\nconst AFButtonComp = props => {\n    const {isInEditor} = props;\n    let convertedProps = {...props}; // we add some default values in the model which is required here\n    if (!isInEditor) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [state, handlers] = useRuleEngine(props);\n        // don't add form change or blur listeners in authoring, so that AEM listeners work\n        convertedProps = {\n            onClick: handlers.dispatchClick,\n            ...state\n        };\n    }\n    return (\n        <ButtonComponent {...convertedProps} />\n    );\n}\n\n\n// editable button\n// abstracts business logic to interact with aem editor\nconst EditableButton = (props) => {\n    const ButtonEditConfig = {\n        emptyLabel: 'Button',\n        isEmpty: function (props) {\n            return !props;\n        }\n    };\n    let isInEditor = AuthoringUtils.isInEditor();\n    const newProps = {\n        isInEditor,\n        ...props\n    };\n    return (\n        <EditableComponent config={ButtonEditConfig} {...newProps}>\n            <AFButtonComp {...newProps} />\n        </EditableComponent>\n    );\n};\n\nexport default MapTo('wknd-spa-react-latest/components/adaptiveForm/button')(EditableButton);","import React from \"react\";\nimport { Select, Text, FormControl, FormLabel } from \"@chakra-ui/react\";\nimport {useRuleEngine} from \"@aemforms/af-react-renderer\";\nimport {AuthoringUtils} from \"@adobe/aem-spa-page-model-manager\";\nimport {EditableComponent, MapTo} from \"@adobe/aem-react-editable-components\";\n\nconst DropDownComponent = (props) => {\n    const changeHandler = (event) => {\n        props.onChange(parseInt(event.target.value));\n    };\n\n    const dropdownData =\n        props.enumNames && props.enumNames.length\n            ? props.enumNames\n            : props.enum || [];\n    const {label, id, required} = props;\n    const isVisible = typeof props.visible === 'undefined' || props.visible;\n    return isVisible ? (\n        <>\n            <FormControl isInvalid={props.errorMessage}>\n                <FormLabel htmlFor={id}>\n                    {label.value} {label.value && required ? \"*\" : \"\"}\n                </FormLabel>\n                <Select onChange={changeHandler} size=\"lg\" mt={2}>\n                    {/* <option value=\"\"></option> Comment this to see default error on validate() */}\n                    {dropdownData?.length > 0\n                        ? dropdownData.map((optionText, index) => (\n                            <option value={index + 1} key={index + 1}>\n                                {optionText}\n                            </option>\n                        ))\n                        : null}\n                </Select>\n                <Text mb=\"8px\" color={\"crimson\"}>\n                    {props.errorMessage}\n                </Text>\n            </FormControl>\n        </>\n    ) : null;\n};\n\n// af specific drop down which interacts with rule engine of adaptive form SDK\nconst AFDropDownComp = props => {\n    const {isInEditor} = props;\n    let convertedProps = {...props}; // we add some default values in the model which is required here\n    if (!isInEditor) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [state, handlers] = useRuleEngine(props);\n        // don't add form change or blur listeners in authoring, so that AEM listeners work\n        convertedProps = {\n            onChange: handlers.dispatchChange,\n            selectedKey: state?.value != null ? state.value + \"\" : state.value,\n            ...state\n        };\n    }\n    return (\n        <DropDownComponent {...convertedProps} />\n    );\n}\n\n// editable drop down\nconst EditableDropDown = (props) => {\n    const DropDownEditConfig = {\n        emptyLabel: 'Drop Down',\n        isEmpty: function (props) {\n            return !props;\n        }\n    };\n    let isInEditor = AuthoringUtils.isInEditor();\n    const newProps = {\n        isInEditor,\n        ...props\n    };\n    return (\n        <EditableComponent config={DropDownEditConfig} {...newProps}>\n            <AFDropDownComp {...newProps} />\n        </EditableComponent>\n    );\n};\n\nexport default MapTo('wknd-spa-react-latest/components/adaptiveForm/dropdown')(EditableDropDown);\n","import 'react-app-polyfill/stable';\nimport 'react-app-polyfill/ie9';\nimport 'custom-event-polyfill';\n\nimport { Constants, ModelManager } from '@adobe/aem-spa-page-model-manager';\nimport { createBrowserHistory } from 'history';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport App from './App';\nimport LocalDevModelClient from './LocalDevModelClient';\nimport './components/import-components';\nimport './index.css';\n\nconst modelManagerOptions = {};\nif(process.env.REACT_APP_PROXY_ENABLED) {\n    modelManagerOptions.modelClient = new LocalDevModelClient(process.env.REACT_APP_API_HOST);\n}\n\nconst renderApp = () => {\n    ModelManager.initialize(modelManagerOptions).then(pageModel => {\n        const history = createBrowserHistory();\n        render(\n            <Router history={history}>\n                <App\n                    history={history}\n                    cqChildren={pageModel[Constants.CHILDREN_PROP]}\n                    cqItems={pageModel[Constants.ITEMS_PROP]}\n                    cqItemsOrder={pageModel[Constants.ITEMS_ORDER_PROP]}\n                    cqPath={pageModel[Constants.PATH_PROP]}\n                    locationPathname={window.location.pathname}\n                />\n            </Router>,\n            document.getElementById('spa-root')\n        );\n    });\n};\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    renderApp();\n});\n"],"sourceRoot":""}